# L'open data

![](img/opendata.jpg)


L’idée de l’Open Data naît dans les années 1990, dans le sillage des mouvements pour le logiciel libre et l’accès libre à l’information scientifique. Mais c’est au tournant des années 2000 que le concept prend de l’ampleur.

**2005** : le Royaume-Uni lance le portail data.gov.uk, un des premiers sites publics de données ouvertes.

**2007** : à Sebastopol (Californie), une réunion entre militants de la transparence et développeurs formule les principes de l'Open Data : données complètes, primaires, lisibles par machine, libres de droit...

**2009** : les États-Unis créent le portail data.gov sur impulsion d’Obama (Open Government Initiative).

**2011** : la France ouvre son propre portail de données publiques, data.gouv.fr


En France, le mouvement est porté par des collectivités locales (comme Paris, Rennes, Nantes) et l’État. La loi pour une République numérique (2016) renforce l’obligation d’ouverture des données publiques.

::: {.callout-tip collapse="false"}
## Qu'est ce qu'une API ?

Une API (Application Programming Interface) est un point d'accès mis à disposition par un service (site web, administration, application) pour permettre à d'autres programmes de demander et recevoir des données ou le résultat d'une requete. 

Dit autrement, une API permet à ton programme de poser des questions à une base de données à distance, d'effectuer des traitements ou des opérations à distance, et d’en recevoir les réponses automatiquement.

Le résultat est souvent renvoyé au  format JSON.
:::

### data.gouv

Sur le site data.gouv, de nombreux jeux de données sont disponibles. On peut les télécharger gratuitement.

https://www.data.gouv.fr/datasets/paris-2024-sites-olympiques-et-paralympiques-franciliens/reuses_and_dataservices

Mais on peut aussi utiliser directement une URL. 

Tapez `https://www.data.gouv.fr/api/1/datasets/r/758b76ef-7624-4a02-b2a1-0d5aed98097f` dans la barre de votre navigateur web.

En javaScript, on récupère ces données avec l'instruction `fetch`


```{.js .custom-js}
const result = fetch('https://www.data.gouv.fr/api/1/datasets/r/758b76ef-7624-4a02-b2a1-0d5aed98097f')
console.log(result)
```

Problème : la fonction JavaScript fetch() est une **fonction asynchrone**. Une fonction asynchrone sert à gérer des opérations longues ou incertaines (comme appeler une API, lire un fichier, attendre une réponse du serveur, etc.) sans bloquer le reste du programme. Une fonction async permet de faire des choses en arrière-plan, tout en gardant un code clair et fluide, sans bloquer l'exécution.

On doit donc procéder comme ceci.


```{.js .custom-js}
fetch('https://www.data.gouv.fr/api/1/datasets/r/758b76ef-7624-4a02-b2a1-0d5aed98097f')
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
```

ou 

```{.js .custom-js}
async function fetchJSON() {
  const response = await fetch('https://www.data.gouv.fr/api/1/datasets/r/758b76ef-7624-4a02-b2a1-0d5aed98097f');
  const data = await response.json();
  console.log(data);
}

fetchJSON();

```

Pouvoir attaquer des jeux de données sans avoir besoin de les télécharger est hyper puissant. Et si on en faisait une carte leaflet ?


```{.html .custom-html}
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet/dist/leaflet.css"
  />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <div id="map"></div>
```


```{.css .custom-css}
    #map {
      height: 300px;
    }
```



```{.js .custom-js}
  async function fetchAndPlot() {
      const response = await fetch('https://www.data.gouv.fr/api/1/datasets/r/758b76ef-7624-4a02-b2a1-0d5aed98097f');
      const data = await response.json();

      console.log(data)

      // Crée une carte centrée sur Paris
      const map = L.map('map').setView([48.8566, 2.3522], 9);

      // Ajoute un fond de carte OpenStreetMap
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap',
      }).addTo(map);

      // Ajoute un marqueur pour chaque site
      data.forEach(site => {
        const lat = site.geo_point.lat;
        const lon = site.geo_point.lon;
        const name = site.nom;

        L.marker([lat, lon])
          .addTo(map)
          .bindPopup(`<strong>${name}</strong>`);
      });
    }

fetchAndPlot();
```


### opendata.paris.fr

Sur le site de la mairie de Paris, de nombreux jeux de données sont également disponibles à travers une API qui permet de requeter toutes les dounnées ouvertes de la ville.

Par exemple, regardons la localisation des stations de Vélib. Il y en a 1459.

https://opendata.paris.fr/explore/dataset/velib-emplacement-des-stations/information/

Tapez cette URL dans la barre de votre navigateur :

```
https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/velib-emplacement-des-stations/records
```
On obtient le résultat de la requete au format JSON. Malheureusemeent, **le nombre de résultat est limité à 100**. Heureusement, il y a le parametre offset. On fait une boucle et hop. 

```{.js .custom-js}
async function getAllStations() {
  const allStations = [];
  let offset = 0;
  const limit = 100;
  let totalCount = Infinity;

  while (offset < totalCount) {
    const url = `https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/velib-emplacement-des-stations/records?limit=${limit}&offset=${offset}`;
    const response = await fetch(url);
    const data = await response.json();
    allStations.push(...data.results);
    totalCount = data.total_count || allStations.length; // total_count est fourni par l'API
    offset += limit;
  }
  return allStations;
}
```




# Altimétrie

https://geoservices.ign.fr/documentation/services/services-geoplateforme/altimetrie

Ce service de l'IGN s'appuie sur des ressources altimétriques pour fournir des altitudes. Ainsi, lancer un calcul en sollicitant une ressource altimétrique basée sur la donnée RGE ALTI® donnera un résultat différent du même calcul sollicitant une ressource altimétrique basée sur la donnée BD ALTI®, en raison des différences de résolution et de précision de ces deux produits.

Il est limité à 5 requêtes/s.

Toute la documentation est [ici](https://geoservices.ign.fr/documentation/services/services-geoplateforme/altimetrie)

https://data.geopf.fr/altimetrie/1.0/calcul/alti/rest/elevation.json?lon=1.48&lat=43.54&resource=ign_rge_alti_wld


```{.js .custom-js}
fetch(
  "https://data.geopf.fr/altimetrie/1.0/calcul/alti/rest/elevation.json?lon=1.48|1.49&lat=43.54|43.55&resource=ign_rge_alti_wld&delimiter=|&indent=false&measures=false&zonly=false"
).then((d) => d.json())
 .then(data => {
 console.log(data)
})
```

Avec une listé déroulante, ca peut donner ca :

```{.html .custom-html}
  <label for="lieux">Choisis un lieu :</label>
  <select id="lieux" name="lieux">
    <option disabled selected>-- Choisis un lieu --</option>
  </select>

  <p id="resultat"></p>
```

```{.js .custom-js}
const lieux = [
  { "nom": "Montmartre", "coords": [48.88685856740631, 2.3430894611004986] },
  { "nom": "Tour Eiffel", "coords": [48.8583701, 2.2944813] },
  { "nom": "Louvre", "coords": [48.8606111, 2.337644] }
]

const select = document.querySelector('#lieux');

    lieux.forEach(lieu => {
      const option = document.createElement('option');
      option.textContent = lieu.nom;
      option.value = JSON.stringify(lieu.coords); // on encode les coordonnées
      select.appendChild(option);
    });

    select.addEventListener('change', () => {
      const coords = JSON.parse(select.value);

fetch(`https://data.geopf.fr/altimetrie/1.0/calcul/alti/rest/elevation.json?lon=${coords[1]}&lat=${coords[0]}&resource=ign_rge_alti_wld`)
  .then(response => response.json())
  .then(data => {
    console.log(coords)
    const alt = data.elevations[0].z
    const str = `L'altitude est de ${alt} metres`
    document.querySelector("#resultat").textContent = str
  })

    });
```

Calculer un profil altimétrique

Ce calcul permet d'obtenir un profil en long. Il est accessible via l'URL suivante 

https://data.geopf.fr/altimetrie/1.0/calcul/alti/rest/elevationLine.{format}

https://data.geopf.fr/altimetrie/1.0/calcul/alti/rest/elevationLine.json?lon=1.48|1.49&lat=43.54|43.55&resource=ign_rge_alti_wld&delimiter=|&indent=true&measures=false&profile_mode=simple&sampling=4

--------------------------------------------------




# Géocodage



https://data.geopf.fr/geocodage/search


## BAN

La Base Adresse Nationale propose différents outils et APIs afin de vous permettre soit de travailler sur votre Base Adresse Locale, soit de consulter ou d'utiliser la Base Adresse Nationale. [https://adresse.data.gouv.fr/outils](https://adresse.data.gouv.fr/outils)




# Météo

https://wxs.ign.fr/{cle}/alti/rest/elevation.json


https://api.meteo.com/v1/paris

# Osrm

